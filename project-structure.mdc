# Configuration File Standards

## Board Defconfig (`*_defconfig`)
Board configuration files should ONLY contain:
- Hardware protection settings (MPU, stack protection)
- Basic peripheral enablement (GPIO, SPI, ADC, RTC)
- Hardware-specific driver configs
- Hardware limitations/restrictions
- Default console method

Example:
```kconfig
# Hardware Protection
CONFIG_ARM_MPU=y
CONFIG_HW_STACK_PROTECTION=y

# Essential Hardware Peripherals
CONFIG_GPIO=y
CONFIG_SPI=y
CONFIG_ADC=y

# Hardware Limitations
CONFIG_UART_NRFX=n
```

## Project Config (`prj.conf`)
Project configuration files should contain:
- Library enablement
- Sensor subsystem configs
- Advanced peripheral settings
- Logging configuration
- Memory and thread settings
- Application-specific overrides

Example:
```kconfig
# Libraries
CONFIG_JUXTA_FRAM=y
CONFIG_JUXTA_FRAMFS=y

# Logging
CONFIG_LOG=y
CONFIG_LOG_DEFAULT_LEVEL=3

# Memory & Threads
CONFIG_MAIN_STACK_SIZE=4096
```

## README Standards (`README.md`)
README files should focus on high-level usage and implementation guidance:
- **Purpose**: What the library/application does
- **Quick Start**: Minimal working example
- **API Overview**: High-level function categories (not individual functions)
- **Use Cases**: When and why to use this component
- **Integration**: How it fits with other components
- **Key Concepts**: Essential technical details (formats, limits, etc.)

**AVOID**:
- ❌ Function-by-function documentation (belongs in .h files)
- ❌ Feature lists or bullet points
- ❌ Emojis or decorative elements
- ❌ Verbose explanations of obvious concepts
- ❌ Implementation details that don't help usage

**INCLUDE**:
- ✅ Concise purpose statement
- ✅ Working code examples
- ✅ Essential technical constraints
- ✅ Integration patterns
- ✅ Common use cases

Example structure:
```markdown
# Library Name

Brief description of what this does and when to use it.

## Quick Start

```c
/* Minimal working example */
```

## API Overview

- **Core Functions**: High-level operations
- **Configuration**: Setup and options
- **Advanced**: Specialized use cases

## Key Concepts

- Format specifications
- Performance characteristics
- Memory requirements
- Thread safety notes
```

## Key Principles
1. Board defconfigs define hardware capabilities
2. Project configs define software behavior
3. READMEs guide implementation and usage
4. No duplication between files
5. Hardware settings belong in defconfig
6. Application settings belong in prj.conf
7. Function documentation belongs in .h files

## Migration Guidelines
When moving settings between files:
1. Hardware-related configs → defconfig
2. Software/application configs → prj.conf
3. Remove duplicates, keeping in defconfig
4. Document hardware limitations in defconfig
5. Move detailed function docs to header files
description:
globs:
alwaysApply: false
---
